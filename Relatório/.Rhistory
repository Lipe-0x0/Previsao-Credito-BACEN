ordered = T)
amostra_nor = amostra_nor|>
mutate(across(tcb:numero_de_operacoes, as.factor)) # Fator
str(amostra)
str(amostra_bahia)
sum(duplicated(amostra_bahia))
sum(is.na(amostra_bahia))
str(amostra_nor)
sum(duplicated(amostra_nor))
sum(is.na(amostra_nor))
# Verificando correlação ponto-bisserial/pearson
amostra_corr = amostra_nor|>
mutate(Mes = as.numeric(Mes), carteira_inadimplida_arrastada = as.numeric(carteira_inadimplida_arrastada)) |>
select(where(is.numeric))
teste_corr = corrplot::cor.mtest(amostra_corr)
corrplot::corrplot(cor(amostra_corr, method = "pearson"), method = "number",
type = "upper",
p.mat = teste_corr$p,
tl.cex = 0.5, # Tamanho das letras
tl.col = "red",
tl.offset = 0.1,
tl.srt = 25) # Inclinação das colunas
plot(amostra_nor$a_vencer_ate_90_dias ~ amostra_nor$vencido_acima_de_15_dias)
str(bacen)
View(amostra_nor)
amostra_nor |> group_by(carteira_inadimplida_arrastada)|> summarise(ativo = sum(ativo_problematico))
ggpie3D(data = amostra_nor, group_key = "cliente", count_type = "full")
library(ggpie)
# Gráficos de pizza sobre cliente
ggpie3D(data = amostra_nor, group_key = "cliente", count_type = "full")
str(amostra_nor)
shapiro.test(amostra_nor$ativo_problematico)
library(car)
leveneTest(amostra_nor$ativo_problematico ~ amostra_nor$ativo_problematico)
leveneTest(amostra_nor$ativo_problematico ~ amostra_nor$cliente)
ggplot(data = amostra_nor, aes(x = porte))+
geom_bar()
ggplot(data = amostra_nor, aes(x = modalidade))+
geom_bar()
ggplot(data = amostra_nor, aes(x = origem))+
geom_bar()
ggplot(data = amostra_nor, aes(x = indexador))+
geom_bar()
# Gráficos de barra com legenda = inadimplencia
ggplot(data = amostra_nor, aes(x = origem))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))
ggplot(data = amostra_nor, aes(x = indexador))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))
ggpie3D(data = amostra_nor, group_key = "carteira_inadimplida_arrastada", count_type = "full")
inadimplida_arrastada
ggplot(data = amostra_nor, aes(x = cliente))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))
amostra_nor |>
group_by(renda) |>
summarise(inadimplencia = sum(carteira_inadimplida_arrastada == "sim"))
amostra_nor |>
group_by(porte) |>
summarise(inadimplencia = sum(carteira_inadimplida_arrastada == "sim"))
amostra_nor |>
group_by(porte) |>
summarise(inadimplencia = sum(carteira_inadimplida_arrastada == "sim")/8512)
amostra_nor |>
group_by(porte) |>
summarise(inadimplencia = (sum(carteira_inadimplida_arrastada == "sim")/8512)*100)
amostra_nor |>
group_by(porte) |>
summarise(inadimplencia(%) = (sum(carteira_inadimplida_arrastada == "sim")/8512)*100)
amostra_nor |>
group_by(porte) |>
summarise("inadimplencia(%)" = (sum(carteira_inadimplida_arrastada == "sim")/8512)*100)
str(amostra_nor)
amostra_nor |>
group_by(modalidade) |>
summarise("inadimplencia (%)" = (sum(carteira_inadimplida_arrastada == "sim")/8512)*100)
amostra_nor |>
group_by(modalidade) |>
summarise("inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/8512)*100))
amostra_nor |>
group_by(modalidade) |>
summarise("inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/8512)*100), 2)
amostra_nor |>
group_by(modalidade) |>
summarise("inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/8512)*100, 2))
amostra_nor |>
group_by(porte) |>
summarise("inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/8512)*100), 2)
amostra_nor |>
group_by(porte) |>
summarise("inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/8512)*100, 2))
amostra_nor |>
group_by(porte) |>
summarise(n = count(porte),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/)*100, 2))
amostra_nor |>
group_by(porte) |>
summarise(n = count(porte),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/n)*100, 2))
amostra_nor |>
group_by(porte) |>
summarise(n = n,
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/n)*100, 2))
# Verificar renda(tabela proporção) e modalidade de credito (tabela proporção)
amostra_nor |>
group_by(porte) |>
summarise("Cont_porte" = count(porte),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_porte)*100, 2))
amostra_nor |>
group_by(porte) |>
summarise("Cont_porte" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_porte)*100, 2))
amostra_nor |>
group_by(modalidade) |>
summarise("Cont_modalide" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_modalide)*100, 2))
str(amostra_nor)
# Verificar modalidade de credito (tabela proporção)
amostra_nor |>
group_by(modalidade) |>
summarise("Cont_modalidade" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_modalidade)*100, 2))
str(amostra_nor)
amostra_nor |>
group_by(ocupacao) |>
summarise("Cont_ocupação" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_ocupação)*100, 2))
amostra_nor |>
group_by(cnae_secao) |>
summarise("Cont_Cnae" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_Cnae)*100, 2))
amostra_nor |>
group_by(sr) |>
summarise("Cont_SR" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_SR)*100, 2))
unique(amostra_nor$sr)
amostra_nor$sr
prop.table(table(amostra_nor$sr))
(table(amostra_nor$sr))
#| include: false
rm(list = ls())
library(tidyverse)
library(e1071) # Pacote para aplicação do NAiveBayes (função NaiveBayes)
library(caret) # Pacote para aplicação do NaiveBayes (função train)
library(gmodels)
library(knitr)
library(ggpie)
library(car)
# Carregando arquivo finalizado
bacen = read.csv("~/R/PROJETOS R/1º Hackaton Decat/Dados BACEN 2025.csv")
#| include: false
amostra_bahia = bacen|>
filter(uf == "BA")
# Utilizando AASs
N = 247209
n = (0.6562099*(1-0.6562099))/
((1-(1/N)) *
((0.01/qnorm(1-0.05/2))^2) +
((0.6562099*(1-0.6562099))/N))
# amostra 1
set.seed(1234)
ind = sample(1:N,n)
amostra_bahia = amostra_bahia[ind,]
# Retirando variaveis
amostra_bahia$data_base = NULL
amostra_bahia$uf = NULL
# Alterando tipo das variaveis
amostra_bahia$Mes = factor(amostra_bahia$Mes, levels = c("jan","fev","mar","abr","mai","jun"),
ordered = T)
amostra_bahia$carteira_inadimplida_arrastada = factor(amostra_bahia$carteira_inadimplida_arrastada, levels =
c("nao","sim"),
ordered = T)
amostra_bahia = amostra_bahia|>
mutate(across(tcb:numero_de_operacoes, as.factor)) # Fator
#| include: false
# Utilizando AAEs
# 9 estratos
N = 1252617
Wh = c(97827/1252617,
247209/1252617,
164299/1252617,
134916/1252617,
122114/1252617,
182164/1252617,
96499/1252617,
121168/1252617,
86421/1252617)
Nh = c(97827,
247209,
164299,
134916,
122114,
182164,
96499,
121168,
86421)
q = qnorm(1-0.05/2)
PropH = as.data.frame(bacen|>
group_by(uf)|>
summarise("soma_nao" = sum(carteira_inadimplida_arrastada == "nao"),
"quantidade_uf" = table(uf),
"proporcao_nao" = soma_nao/quantidade_uf))$proporcao_nao
num = sum((Wh^2)*
(Nh/(Nh-1))*
((PropH*(1-PropH))/Wh))
den = ((0.01/q)^2)+
sum((Wh^2)*
((PropH*(1-PropH))/(Nh-1)))
n = num/den
# amostra 1
set.seed(1234)
ind = sample(1:N,n)
amostra_nor = bacen[ind,]
# Retirando variaveis
amostra_nor$data_base = NULL
amostra_nor$uf = NULL
# Alterando tipo das variaveis
amostra_nor$Mes = factor(amostra_nor$Mes, levels = c("jan","fev","mar","abr","mai","jun"),
ordered = T)
amostra_nor$carteira_inadimplida_arrastada = factor(amostra_nor$carteira_inadimplida_arrastada,
levels = c("nao","sim"),
ordered = T)
amostra_nor = amostra_nor|>
mutate(across(tcb:numero_de_operacoes, as.factor)) # Fator
#| echo: false
#| message: true
#| warning: false
x = as.data.frame(prop.table(table(bacen$uf))*100)|>
rename("Estado" = "Var1","Proporção" = "Freq")
kable(x,
format = "html",
format.args = list(decimal.mark = ","),
caption = "Proporções de Estados do Nordeste")
# Verificando correlação ponto-bisserial/pearson
amostra_corr = amostra_nor|>
mutate(Mes = as.numeric(Mes), carteira_inadimplida_arrastada = as.numeric(carteira_inadimplida_arrastada)) |>
select(where(is.numeric))
teste_corr = corrplot::cor.mtest(amostra_corr)
corrplot::corrplot(cor(amostra_corr, method = "pearson"), method = "number",
type = "upper",
p.mat = teste_corr$p,
tl.cex = 0.5, # Tamanho das letras
tl.col = "red",
tl.offset = 0.1,
tl.srt = 25) # Inclinação das colunas
# Gráficos de pizza sobre cliente
ggpie3D(data = amostra_nor, group_key = "carteira_inadimplida_arrastada", count_type = "full")
# gráfico de barra sobre cliente
ggplot(data = amostra_nor, aes(x = cliente))+
geom_bar(aes(fill = carteira_inadimplida_arrastada), )
# Gráficos de pizza sobre cliente
ggpie3D(data = amostra_nor, group_key = "cliente", count_type = "full")
# Verificar renda (tabela proporção)
amostra_nor |>
group_by(porte) |>
summarise("Cont_porte" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_porte)*100, 2))
# Verificar modalidade de credito (tabela proporção)
amostra_nor |>
group_by(modalidade) |>
summarise("Cont_modalidade" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_modalidade)*100, 2))
# Verificar ocupação (tabela proporção)
amostra_nor |>
group_by(ocupacao) |>
summarise("Cont_ocupação" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_ocupação)*100, 2))
# Verificar ocupação (tabela proporção)
amostra_nor |>
group_by(sr) |>
summarise("Cont_SR" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_SR)*100, 2))
# Gráficos de barra com legenda = inadimplencia
ggplot(data = amostra_nor, aes(x = origem))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))
ggplot(data = amostra_nor, aes(x = indexador))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))
# Verificar ocupação (tabela proporção)
amostra_nor |>
group_by(cnae_secao) |>
summarise("Cont_Cnae" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_Cnae)*100, 2))
View(amostra_nor)
ggplot(data = amostra_nor, aes(x = sr))+
geom_bar(aes(fill = cliente))
unique(amostra_nor$porte)
# Gráficos de pizza sobre cliente
ggpie3D(data = amostra_nor, group_key = "carteira_inadimplida_arrastada", count_type = "full")
# gráfico de barra sobre cliente
ggplot(data = amostra_nor, aes(x = cliente))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))
ggplot(data = amostra_nor, aes(x = cliente))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))+
xlab("Cliente")+
ylab("Contagem")+
title(main = "Inadimplência por Clientes")
ggplot(data = amostra_nor, aes(x = cliente))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))+
xlab("Cliente")+
ylab("Contagem")+
ggtitle(main = "Inadimplência por Clientes")
ggplot(data = amostra_nor, aes(x = cliente))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))+
xlab("Cliente")+
ylab("Contagem")+
ggtitle("Inadimplência por Clientes")
ggplot(data = amostra_nor, aes(x = cliente))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))+
xlab("Cliente")+
ylab("Contagem")+
ggtitle("Inadimplência por Clientes")+
labs(fill = "Inadimplente")
# Gráficos de pizza sobre cliente
ggpie3D(data = amostra_nor, group_key = "cliente", count_type = "full")
# Verificar modalidade de credito (tabela proporção)
amostra_nor |>
group_by(modalidade) |>
summarise("Cont_modalidade" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_modalidade)*100, 2))
# Verificar SR (tabela proporção)
amostra_nor |>
group_by(sr) |>
summarise("Cont_SR" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_SR)*100, 2))
# Verificando quantitativo de clientes em cada Segmento
ggplot(data = amostra_nor, aes(x = sr))+
geom_bar(aes(fill = cliente))
#| include: false
rm(list = ls())
library(tidyverse) # Manipulação dos dados
library(e1071) # Pacote para aplicação do NAiveBayes (função NaiveBayes)
library(caret) # Pacote para aplicação do NaiveBayes (função train)
library(gmodels) # Pacote para aplicação da tabela cruzada
library(knitr) # Criação de tabelas
library(ggpie) # Gráficos de pizza 3D
# Carregando arquivo finalizado
bacen = read.csv("~/R/PROJETOS R/1º Hackaton Decat/Dados BACEN 2025.csv")
#| include: false
amostra_bahia = bacen|>
filter(uf == "BA")
# Utilizando AASs
N = 247209
n = (0.6562099*(1-0.6562099))/
((1-(1/N)) *
((0.01/qnorm(1-0.05/2))^2) +
((0.6562099*(1-0.6562099))/N))
# amostra 1
set.seed(1234)
ind = sample(1:N,n)
amostra_bahia = amostra_bahia[ind,]
# Retirando variaveis
amostra_bahia$data_base = NULL
amostra_bahia$uf = NULL
# Alterando tipo das variaveis
amostra_bahia$Mes = factor(amostra_bahia$Mes, levels = c("jan","fev","mar","abr","mai","jun"),
ordered = T)
amostra_bahia$carteira_inadimplida_arrastada = factor(amostra_bahia$carteira_inadimplida_arrastada, levels =
c("nao","sim"),
ordered = T)
amostra_bahia = amostra_bahia|>
mutate(across(tcb:numero_de_operacoes, as.factor)) # Fator
#| include: false
# Utilizando AAEs
# 9 estratos
N = 1252617
Wh = c(97827/1252617,
247209/1252617,
164299/1252617,
134916/1252617,
122114/1252617,
182164/1252617,
96499/1252617,
121168/1252617,
86421/1252617)
Nh = c(97827,
247209,
164299,
134916,
122114,
182164,
96499,
121168,
86421)
q = qnorm(1-0.05/2)
PropH = as.data.frame(bacen|>
group_by(uf)|>
summarise("soma_nao" = sum(carteira_inadimplida_arrastada == "nao"),
"quantidade_uf" = table(uf),
"proporcao_nao" = soma_nao/quantidade_uf))$proporcao_nao
num = sum((Wh^2)*
(Nh/(Nh-1))*
((PropH*(1-PropH))/Wh))
den = ((0.01/q)^2)+
sum((Wh^2)*
((PropH*(1-PropH))/(Nh-1)))
n = num/den
# amostra 1
set.seed(1234)
ind = sample(1:N,n)
amostra_nor = bacen[ind,]
# Retirando variaveis
amostra_nor$data_base = NULL
amostra_nor$uf = NULL
# Alterando tipo das variaveis
amostra_nor$Mes = factor(amostra_nor$Mes, levels = c("jan","fev","mar","abr","mai","jun"),
ordered = T)
amostra_nor$carteira_inadimplida_arrastada = factor(amostra_nor$carteira_inadimplida_arrastada,
levels = c("nao","sim"),
ordered = T)
amostra_nor = amostra_nor|>
mutate(across(tcb:numero_de_operacoes, as.factor)) # Fator
#| echo: false
#| message: true
#| warning: false
x = as.data.frame(prop.table(table(bacen$uf))*100)|>
rename("Estado" = "Var1","Proporção" = "Freq")
kable(x,
format = "html",
format.args = list(decimal.mark = ","),
caption = "Proporções de Estados do Nordeste")
# gráfico de barra sobre cliente
ggplot(data = amostra_nor, aes(x = cliente))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))+
xlab("Cliente")+
ylab("Contagem")+
ggtitle("Inadimplência por Clientes")+
labs(fill = "Inadimplente")
# Verificar modalidade de credito (tabela proporção)
amostra_nor |>
group_by(modalidade) |>
summarise("Cont_modalidade" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_modalidade)*100, 2))
# Verificar ocupação (tabela proporção)
amostra_nor |>
group_by(ocupacao) |>
summarise("Cont_ocupação" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_ocupação)*100, 2))
# Verificar renda/porte (tabela proporção)
amostra_nor |>
group_by(porte) |>
summarise("Cont_porte" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_porte)*100, 2))
# Verificando correlação ponto-bisserial/pearson
amostra_corr = amostra_nor|>
mutate(Mes = as.numeric(Mes), carteira_inadimplida_arrastada = as.numeric(carteira_inadimplida_arrastada)) |>
select(where(is.numeric))
teste_corr = corrplot::cor.mtest(amostra_corr)
corrplot::corrplot(cor(amostra_corr, method = "pearson"), method = "number",
type = "upper",
p.mat = teste_corr$p,
tl.cex = 0.5, # Tamanho das letras
tl.col = "red",
tl.offset = 0.1,
tl.srt = 25) # Inclinação das colunas
# Verificar SR (tabela proporção)
amostra_nor |>
group_by(sr) |>
summarise("Cont_SR" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_SR)*100, 2))
# Gráficos de barra com legenda = inadimplencia
ggplot(data = amostra_nor, aes(x = origem))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))
ggplot(data = amostra_nor, aes(x = indexador))+
geom_bar(aes(fill = carteira_inadimplida_arrastada))
# Verificar cnae (tabela proporção)
amostra_nor |>
group_by(cnae_secao) |>
summarise("Cont_Cnae" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_Cnae)*100, 2))
# Verificando quantitativo de clientes em cada Segmento
ggplot(data = amostra_nor, aes(x = sr))+
geom_bar(aes(fill = cliente))
# Verificando quantitativo de clientes em cada Segmento
ggplot(data = amostra_nor, aes(x = sr))+
geom_bar(aes(fill = cliente))
# Verificando quantitativo de clientes em cada Segmento
ggplot(data = amostra_nor, aes(x = sr))+
geom_bar(aes(fill = cliente))+
xlab("Segmento das Instituições Financeiras")+
ylab("Contagem")+
ggtitle("Segmento por Cliente")+
labs("Tipo de cliente")
#| echo: false
# Verificar SR (tabela proporção)
amostra_nor |>
group_by(sr) |>
summarise("Cont_SR" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_SR)*100, 2))
#| echo: false
# Verificar modalidade de credito (tabela proporção)
x = amostra_nor |>
group_by(modalidade) |>
summarise("Cont_modalidade" = n(),
"inadimplencia (%)" = round((sum(carteira_inadimplida_arrastada == "sim")/Cont_modalidade)*100, 2))
kable(x,
format = "html",
format.args = list(decimal.mark = ","),
caption = "Proporções de Estados do Nordeste")
str(bacen)
library(car)
leveneTest(amostra_nor$ativo_problematico ~ amostra_nor$cliente)
leveneTest(amostra_nor$ativo_problematico ~ amostra_nor$cliente, center = mean)
leveneTest(amostra_nor$carteira_ativa ~ amostra_nor$cliente)
leveneTest(amostra_nor$ativo_problematico ~ amostra_nor$cliente)
leveneTest(amostra_nor$carteira_inadimplida_arrastada ~ amostra_nor$cliente)
chisq.test(x = amostra_nor$cliente, y = amostra_nor$carteira_inadimplida_arrastada)
chisq.test(x = amostra_nor$sr, y = amostra_nor$carteira_inadimplida_arrastada)
hist(amostra_nor$vencido_acima_de_15_dias)
hist(amostra_nor$carteira_ativa)
barplot(amostra_nor$numero_de_operacoes)
ggplot(data = amostra_nor, aes(x = numero_de_operacoes))+geom_bar()
library(tidyverse)
ggplot(data = amostra_nor, aes(x = numero_de_operacoes))+geom_bar()
table(amostra_nor$cliente, amostra_nor$carteira_inadimplida_arrastada)
